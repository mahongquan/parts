[{"D:\\parts\\static\\react-query-todos\\src\\index.tsx":"1","D:\\parts\\static\\react-query-todos\\src\\reportWebVitals.ts":"2","D:\\parts\\static\\react-query-todos\\src\\App.tsx":"3","D:\\parts\\static\\react-query-todos\\src\\components\\Todos.tsx":"4","D:\\parts\\static\\react-query-todos\\src\\components\\Todo.tsx":"5","D:\\parts\\static\\react-query-todos\\src\\components\\AddTodo.tsx":"6","D:\\parts\\static\\react-query-todos\\src\\hooks\\useTodo.ts":"7","D:\\parts\\static\\react-query-todos\\src\\hooks\\useAddTodo.ts":"8","D:\\parts\\static\\react-query-todos\\src\\hooks\\useTodos.ts":"9"},{"size":517,"mtime":1612749641527,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1612749641528,"results":"12","hashOfConfig":"11"},{"size":791,"mtime":1612749641524,"results":"13","hashOfConfig":"11"},{"size":1094,"mtime":1612749641525,"results":"14","hashOfConfig":"11"},{"size":837,"mtime":1612749641525,"results":"15","hashOfConfig":"11"},{"size":1106,"mtime":1612749641524,"results":"16","hashOfConfig":"11"},{"size":1013,"mtime":1612750185967,"results":"17","hashOfConfig":"11"},{"size":1482,"mtime":1612750136748,"results":"18","hashOfConfig":"11"},{"size":1059,"mtime":1612750298328,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1tuy34a",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\parts\\static\\react-query-todos\\src\\index.tsx",[],["42","43"],"D:\\parts\\static\\react-query-todos\\src\\reportWebVitals.ts",[],"D:\\parts\\static\\react-query-todos\\src\\App.tsx",[],"D:\\parts\\static\\react-query-todos\\src\\components\\Todos.tsx",["44"],"import React from 'react'\r\nimport { useQueryClient } from 'react-query'\r\n\r\nimport { useTodos } from '../hooks/useTodos'\r\n\r\ninterface Props {\r\n  setTodoId: (id: number) => void\r\n}\r\n\r\nconst Todos: React.FC<Props> = ({ setTodoId }) => {\r\n  const queryClient = useQueryClient()\r\n  const { data, isLoading, error } = useTodos()\r\n\r\n  if (isLoading) return <h4 style={{ color: 'red' }}>Loading...</h4>\r\n\r\n  // if (error) return <p>{error}</p>\r\n  if (error) return <p>{error.message}</p>\r\n\r\n  return (\r\n    <div>\r\n      <h3>Todos</h3>\r\n\r\n      {data &&\r\n        data\r\n          .sort((a, b) => b.id - a.id)\r\n          .map((todo) => (\r\n            <p key={todo.id}>\r\n              <a\r\n                href='#'\r\n                onClick={() => setTodoId(todo.id)}\r\n                style={\r\n                  queryClient.getQueryData(['todo', todo.id])\r\n                    ? { color: 'green', fontWeight: 'bold' }\r\n                    : {}\r\n                }\r\n              >\r\n                {todo.title}\r\n              </a>\r\n            </p>\r\n          ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todos\r\n","D:\\parts\\static\\react-query-todos\\src\\components\\Todo.tsx",["45"],"import React from 'react'\r\n\r\nimport { useTodo } from '../hooks/useTodo'\r\n\r\ninterface Props {\r\n  todoId: number\r\n  setTodoId: (id: number) => void\r\n}\r\n\r\nconst Todo: React.FC<Props> = ({ todoId, setTodoId }) => {\r\n  const { data, isLoading, error } = useTodo(todoId)\r\n\r\n  if (isLoading) return <h4 style={{ color: 'red' }}>Loading...</h4>\r\n\r\n  // if (error) return <p>{error}</p>\r\n  if (error) return <p>{error.message}</p>\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <a href='#' onClick={() => setTodoId(-1)}>\r\n          Back\r\n        </a>\r\n      </div>\r\n\r\n      <>\r\n        {data ? (\r\n          <div>\r\n            <h3>Title: {data.title}</h3>\r\n            <p>Completed: {data.completed ? 'Yes' : 'No'}</p>\r\n          </div>\r\n        ) : (\r\n          <p>Not found</p>\r\n        )}\r\n      </>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","D:\\parts\\static\\react-query-todos\\src\\components\\AddTodo.tsx",[],"D:\\parts\\static\\react-query-todos\\src\\hooks\\useTodo.ts",["46","47","48"],"import { useState, useEffect, useCallback } from 'react'\r\nimport { useQuery } from 'react-query'\r\n\r\nimport { Todo } from './useTodos'\r\n\r\nexport const useTodo = (id: number) => {\r\n  // const [isLoading, setIsLoading] = useState(false)\r\n  // const [error, setError] = useState('')\r\n  // const [data, setData] = useState<Todo | null>(null)\r\n\r\n  // const fetchTodo = useCallback(async () => {\r\n  //   try {\r\n  //     setIsLoading(true)\r\n\r\n  //     const resData = await fetch(\r\n  //       `http://localhost:4000/todos/${id}`\r\n  //     ).then((res) => res.json())\r\n\r\n  //     setData(resData)\r\n  //     setIsLoading(false)\r\n  //   } catch (err) {\r\n  //     setError('Sorry, something went wrong.')\r\n  //     setIsLoading(false)\r\n  //   }\r\n  // }, [id])\r\n\r\n  // useEffect(() => {\r\n  //   fetchTodo()\r\n  // }, [fetchTodo])\r\n\r\n  // return { data, isLoading, error }\r\n\r\n  return useQuery<Todo, { message: string }>(['todo', id], () =>\r\n    fetch(`http://localhost:8000/rest/Todo/${id}`).then((res) => res.json())\r\n  )\r\n}\r\n","D:\\parts\\static\\react-query-todos\\src\\hooks\\useAddTodo.ts",[],"D:\\parts\\static\\react-query-todos\\src\\hooks\\useTodos.ts",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":28,"column":15,"nodeType":"55","endLine":36,"endColumn":16},{"ruleId":"53","severity":1,"message":"54","line":21,"column":9,"nodeType":"55","endLine":21,"endColumn":51},{"ruleId":"56","severity":1,"message":"57","line":1,"column":10,"nodeType":"58","messageId":"59","endLine":1,"endColumn":18},{"ruleId":"56","severity":1,"message":"60","line":1,"column":20,"nodeType":"58","messageId":"59","endLine":1,"endColumn":29},{"ruleId":"56","severity":1,"message":"61","line":1,"column":31,"nodeType":"58","messageId":"59","endLine":1,"endColumn":42},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation"]